{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Arrays/","title":"Description","text":"<p>Array is a linear data structure where all elements are arranged sequentially. It is a collection of elements of same data type stored at contiguous memory locations. </p> <p>For simplicity, we can think of an array as a flight of stairs where on each step is placed a value (let\u2019s say one of your friends). Here, you can identify the location of any of your friends by simply knowing the count of the step they are on. </p> <p>This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array). The base value is index 0 and the difference between the two indexes is the offset.</p> <p>Remember: \u201cLocation of next index depends on the data type we use\u201d. </p>"},{"location":"Arrays/largest_element_in_array/","title":"2. Largest Element in Array","text":""},{"location":"Arrays/largest_element_in_array/#description","title":"Description","text":"<p>Given an array \u2018arr\u2019 of size \u2018n\u2019 find the largest element in the array.</p> <p>Example:</p> <p>Input: 'n' = 5, 'arr' = [1, 2, 3, 4, 5]</p> <p>Output: 5</p> <p>Explanation: From the array {1, 2, 3, 4, 5}, the largest element is 5.</p>"},{"location":"Arrays/largest_element_in_array/#solution","title":"Solution","text":"PythonGo <pre><code>def find_largest(arr):\n    \"\"\"\n    The function finds the largest element from the given array\n    \"\"\"\n    largest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] &gt; largest:\n            largest = arr[i]\n    return largest\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(f\"Enter the array element separated by space:\").split()))\n    largest = find_largest(arr)\n    print(f\"The largest element in the array is {largest}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc findLargest(arr []int) int {\n    largest := arr[0]\n    for _, num := range arr {\n        if num &gt; largest {\n            largest = num\n        }\n    }\n    return largest\n}\n\nfunc main() {\n    fmt.Print(\"Enter the array elements separated by space: \")\n    scanner := bufio.NewScanner(os.Stdin)\n    if scanner.Scan() {\n        inputStr := scanner.Text()\n        strArr := strings.Split(inputStr, \" \")\n        var arr []int\n        for _, str := range strArr {\n            num, err := strconv.Atoi(str)\n            if err != nil {\n                fmt.Println(err)\n                fmt.Println(\"Invalid input. Please enter integers separated by space.\")\n                return\n            }\n            arr = append(arr, num)\n        }\n        largest := findLargest(arr)\n        fmt.Printf(\"The largest element in the array is %d\\n\", largest)\n    }\n}\n</code></pre>"},{"location":"Arrays/left_rotate_array/","title":"3. Left Rotate Array","text":""},{"location":"Arrays/left_rotate_array/#description","title":"Description","text":"<p>Problem statement Given an array 'arr' with 'n' elements, the task is to rotate the array to the left by 'k' steps, where 'k' is non-negative.</p> <p>Example: 'arr '= [1,2,3,4,5] 'k' = 1  rotated array = [2,3,4,5,1] 'k' = 2  rotated array = [3,4,5,1,2] 'k' = 3  rotated array = [4,5,1,2,3] and so on.</p>"},{"location":"Arrays/left_rotate_array/#solution","title":"Solution","text":"PythonGo <pre><code>def left_rotate(arr, rotations):\n    n = len(arr)\n    rotations = rotations % n\n    temp = []\n    for i in range(0, rotations):\n        temp.append(arr[i])\n    for i in range(rotations, n):\n        arr[i - rotations] = arr[i]\n    for i in range(n - rotations, n):\n        arr[i] = temp[i - (n - rotations)]\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(f\"Enter array elements separated by space: \").split()))\n    rotations = int(input(f\"Enter the number of rotations: \"))\n    left_rotate(arr, rotations)\n    print(f\"Value of arr after rotating it {rotations} times is {arr}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc main() {\n    fmt.Println(\"Enter the array elements separated by space:\")\n\n    // Create a scanner to read input line by line\n    scanner := bufio.NewScanner(os.Stdin)\n\n    // Read the first line of input (array elements)\n    if scanner.Scan() {\n        line := scanner.Text()\n        arr := parseInts(line)\n\n        // Read the second line of input (number of rotations)\n        fmt.Println(\"Enter the number of rotations:\")\n        if scanner.Scan() {\n            line = scanner.Text()\n            numRotations, err := strconv.Atoi(line)\n            if err != nil {\n                fmt.Println(\"Invalid input for number of rotations.\")\n                return\n            }\n\n            leftRotate(arr, numRotations)\n            fmt.Printf(\"Value of arr after rotating it %d times is %v\\n\", numRotations, arr)\n        }\n    }\n\n    // Check for errors during scanning\n    if err := scanner.Err(); err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n}\n\n// parseInts parses a space-separated string of integers into a slice of integers\nfunc parseInts(s string) []int {\n    strArr := strings.Fields(s)\n    arr := make([]int, len(strArr))\n    for i, str := range strArr {\n        num, err := strconv.Atoi(str)\n        if err != nil {\n            fmt.Println(\"Invalid input. Please enter integers separated by space.\")\n            os.Exit(1)\n        }\n        arr[i] = num\n    }\n    return arr\n}\n\nfunc leftRotate(arr []int, rotations int) {\n    n := len(arr)\n    rotations = rotations % n\n    temp := make([]int, rotations)\n    copy(temp, arr[0:rotations])\n    for i := rotations; i &lt; n; i++ {\n        arr[i-rotations] = arr[i]\n    }\n    for i := n - rotations; i &lt; n; i++ {\n        arr[i] = temp[i-(n-rotations)]\n    }\n}\n</code></pre>"},{"location":"Arrays/move_zeros_to_end/","title":"5. Move Zeros","text":""},{"location":"Arrays/move_zeros_to_end/#description","title":"Description","text":"<p>Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <p>Example: Input: nums= [0,1,0,3,12] Output: [1,3,12,0,0]</p>"},{"location":"Arrays/move_zeros_to_end/#solution","title":"Solution","text":""},{"location":"Arrays/move_zeros_to_end/#brute-force-solution","title":"Brute Force Solution","text":"PythonGo <pre><code>def move_zeros(arr):\n    n = len(arr)\n    temp = []\n    for i in range(n):\n        if arr[i] != 0:\n            temp.append(arr[i])\n    for i in range(0, len(temp)):\n        arr[i] = temp[i]\n    for i in range(len(temp), n):\n        arr[i] = 0\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(f\"Enter array elements separated by space: \").split()))\n    move_zeros(arr)\n    print(f\"Value of arr after moving zeros at the end is {arr}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc main() {\n    fmt.Println(\"Enter the array elements separated by space: \")\n    scanner := bufio.NewScanner(os.Stdin)\n    if scanner.Scan() {\n        line := scanner.Text()\n        arr := parseInts(line)\n        moveZeros(arr)\n        fmt.Printf(\"Value of array after moving zeros to end is %v\\n\", arr)\n    }\n\n}\nfunc moveZeros(arr []int) {\n    temp := make([]int, 0)\n    n := len(arr)\n    for i := 0; i &lt; n; i++ {\n        if arr[i] != 0 {\n            temp = append(temp, arr[i])\n        }\n    }\n    for i := 0; i &lt; len(temp); i++ {\n        arr[i] = temp[i]\n    }\n    for i := len(temp); i &lt; n; i++ {\n        arr[i] = 0\n    }\n}\nfunc parseInts(s string) []int {\n    strArr := strings.Fields(s)\n    arr := make([]int, len(strArr))\n    for i, str := range strArr {\n        num, err := strconv.Atoi(str)\n        if err != nil {\n            fmt.Println(\"Invalid input.Please enter integers separated by space.\")\n            os.Exit(1)\n        }\n        arr[i] = num\n    }\n    return arr\n}\n</code></pre>"},{"location":"Arrays/move_zeros_to_end/#optimised-solution","title":"Optimised Solution","text":"PythonGo <pre><code>def move_zeros(arr):\n    n = len(arr)\n    j = -1\n    for i in range(0, n):\n        # point j to first zero element\n        if arr[i] == 0:\n            j = i\n            break\n    # if j remains -1 that means array doesn't have any zero element\n    if j != -1:\n        for i in range(j + 1, n):\n            if arr[i] != 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                j += 1\n\n\nif __name__ == \"__main__\":\n    arr = list(\n        map(int, input(f\"Enter the array elements separated by space: \").split())\n    )\n    move_zeros(arr)\n    print(f\"Value of array after moving zeros at the end is {arr}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc main() {\n    fmt.Println(\"Enter the array elements separated by space: \")\n    scanner := bufio.NewScanner(os.Stdin)\n    if scanner.Scan() {\n        line := scanner.Text()\n        arr := parseInts(line)\n        moveZeros(arr)\n        fmt.Printf(\"Value of array after moving zeros to end is %v\\n\", arr)\n    }\n\n}\nfunc moveZeros(arr []int) {\n    n := len(arr)\n    j := -1\n    for i := 0; i &lt; n; i++ {\n        if arr[i] == 0 {\n            j = i\n            break\n        }\n    }\n    if j != -1 {\n        for i := j + 1; i &lt; n; i++ {\n            if arr[i] != 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                j++\n            }\n        }\n    }\n}\nfunc parseInts(s string) []int {\n    strArr := strings.Fields(s)\n    arr := make([]int, len(strArr))\n    for i, str := range strArr {\n        num, err := strconv.Atoi(str)\n        if err != nil {\n            fmt.Println(\"Invalid input.Please enter integers separated by space.\")\n            os.Exit(1)\n        }\n        arr[i] = num\n    }\n    return arr\n}\n</code></pre>"},{"location":"Arrays/rotate_array_189/","title":"1. Right Rotate Array","text":""},{"location":"Arrays/rotate_array_189/#description","title":"Description","text":"<p>Given an integer array <code>nums</code>\u00a0rotate the array to the right by <code>k</code> steps,where <code>k</code> is non-negative.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</pre>"},{"location":"Arrays/rotate_array_189/#solution","title":"Solution","text":"PythonGo <pre><code>def right_rotate(arr, rotations):\n    n = len(arr)\n    rotations = rotations % n\n    temp = []\n    for i in range(n - rotations, n):\n        temp.append(arr[i])\n    # shift the elements to right\n    for i in range(n - 1, rotations - 1, -1):\n        arr[i] = arr[i - rotations]\n    for i in range(0, len(temp)):\n        arr[i] = temp[i]\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(\"Enter array element separated by space:\").split()))\n    rotations = int(input(f\"Enter the number of rotations\"))\n    right_rotate(arr, rotations)\n    print(f\"Value of arr after rotating it {rotations} times is {arr}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc rightRotate(arr []int, rotations int) {\n    n := len(arr)\n    rotations = rotations % n\n    temp := make([]int, rotations)\n    copy(temp, arr[n-rotations:])\n    for i := n - 1; i &gt;= rotations; i-- {\n        arr[i] = arr[i-rotations]\n    }\n    for i := 0; i &lt; rotations; i++ {\n        arr[i] = temp[i]\n    }\n}\n\n// parseInts parses a space-separated string of integers into a slice of integers\nfunc parseInts(s string) []int {\n    strArr := strings.Fields(s)\n    arr := make([]int, len(strArr))\n    for i, str := range strArr {\n        num, err := strconv.Atoi(str)\n        if err != nil {\n            fmt.Println(\"Invalid input. Please enter integers separated by space.\")\n            os.Exit(1)\n        }\n        arr[i] = num\n    }\n    return arr\n}\nfunc main() {\n    fmt.Println(\"Enter the array elements separated by space:\")\n\n    // Create a scanner to read input line by line\n    scanner := bufio.NewScanner(os.Stdin)\n\n    // Read the first line of input (array elements)\n    if scanner.Scan() {\n        line := scanner.Text()\n        arr := parseInts(line)\n\n        // Read the second line of input (number of rotations)\n        fmt.Println(\"Enter the number of rotations:\")\n        if scanner.Scan() {\n            line = scanner.Text()\n            numRotations, err := strconv.Atoi(line)\n            if err != nil {\n                fmt.Println(\"Invalid input for number of rotations.\")\n                return\n            }\n\n            // Perform rotations\n            rightRotate(arr, numRotations)\n            fmt.Printf(\"Value of arr after rotating it %d times is %v\\n\", numRotations, arr)\n\n        }\n\n    }\n\n}\n</code></pre>"},{"location":"Arrays/second_largest_element/","title":"4. Second Largest Element","text":""},{"location":"Arrays/second_largest_element/#description","title":"Description","text":"<p>Given an array Arr of size N, print the second largest distinct element from an array. If the second largest element doesn't exist then return -1.</p> <p>Example 1: Input:  N = 6 Arr[] = {12, 35, 1, 10, 34, 1} Output: 34 Explanation: The largest element of the  array is 35 and the second largest element is 34.</p> <p>Example 2: Input:  N = 3 Arr[] = {10, 5, 10} Output: 5 Explanation: The largest element of  the array is 10 and the second  largest element is 5.</p>"},{"location":"Arrays/second_largest_element/#solution","title":"Solution","text":""},{"location":"Arrays/second_largest_element/#time-complexity-o2n","title":"Time Complexity: O(2N)","text":"PythonGo <pre><code>def find_second_largest(arr):\n    n = len(arr)\n    largest = arr[0]\n    second_largest = -1\n    # First Pass\n    for i in range(0, n):\n        if arr[i] &gt; largest:\n            largest = arr[i]\n    # Second Pass\n    for i in range(0, n):\n        if arr[i] &gt; second_largest and arr[i] != largest:\n            second_largest = arr[i]\n    return second_largest\n\n\nif __name__ == \"__main__\":\n    arr = list(\n        map(int, input(f\"Enter the array elements separated by space: \").split())\n    )\n    second_largest = find_second_largest(arr)\n    print(f\"Value of second largest element in array is {second_largest}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc findSecondLargest(arr []int) int {\n    n := len(arr)\n    largest := arr[0]\n    secondLargest := -1\n    for i := 0; i &lt; n; i++ {\n        if arr[i] &gt; largest {\n            largest = arr[i]\n        }\n    }\n    for i := 0; i &lt; n; i++ {\n        if arr[i] &gt; secondLargest &amp;&amp; arr[i] != largest {\n            secondLargest = arr[i]\n        }\n    }\n    return secondLargest\n}\n\n// parseInts parses a space-separated string of integers into a slice of integers\nfunc parseInts(s string) []int {\n    strArr := strings.Fields(s)\n    arr := make([]int, len(strArr))\n    for i, str := range strArr {\n        num, err := strconv.Atoi(str)\n        if err != nil {\n            fmt.Println(\"Invalid input. Please enter integers separated by space.\")\n            os.Exit(1)\n        }\n        arr[i] = num\n    }\n    return arr\n}\nfunc main() {\n    fmt.Println(\"Enter the array elements separated by space:\")\n\n    // Create a scanner to read input line by line\n    scanner := bufio.NewScanner(os.Stdin)\n\n    // Read the first line of input (array elements)\n    if scanner.Scan() {\n        line := scanner.Text()\n        arr := parseInts(line)\n\n        secondLargest := findSecondLargest(arr)\n        fmt.Printf(\"Value of second largest element is %v\\n\", secondLargest)\n\n    }\n\n}\n</code></pre>"},{"location":"Arrays/second_largest_element/#time-complexity-on","title":"Time Complexity: O(N)","text":"PythonGo <pre><code>def find_second_largest(arr):\n    n = len(arr)\n    largest = arr[0]\n    second_largest = -1\n    for i in range(1, n):\n        if arr[i] &gt; largest:\n            second_largest = largest\n            largest = arr[i]\n        elif arr[i] &lt; largest and arr[i] &gt; second_largest:\n            second_largest = arr[i]\n    return second_largest\n\n\nif __name__ == \"__main__\":\n    arr = list(\n        map(int, input(f\"Enter the array elements separated by space: \").split())\n    )\n    second_largest = find_second_largest(arr)\n    print(f\"Value of second largest element in array is {second_largest}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc findSecondLargest(arr []int) int {\n    n := len(arr)\n    largest := arr[0]\n    secondLargest := -1\n    for i := 0; i &lt; n; i++ {\n        if arr[i] &gt; largest {\n            secondLargest = largest\n            largest = arr[i]\n        } else if arr[i] &lt; largest &amp;&amp; arr[i] &gt; secondLargest {\n            secondLargest = arr[i]\n        }\n    }\n    return secondLargest\n}\n\n// parseInts parses a space-separated string of integers into a slice of integers\nfunc parseInts(s string) []int {\n    strArr := strings.Fields(s)\n    arr := make([]int, len(strArr))\n    for i, str := range strArr {\n        num, err := strconv.Atoi(str)\n        if err != nil {\n            fmt.Println(\"Invalid input. Please enter integers separated by space.\")\n            os.Exit(1)\n        }\n        arr[i] = num\n    }\n    return arr\n}\nfunc main() {\n    fmt.Println(\"Enter the array elements separated by space:\")\n\n    // Create a scanner to read input line by line\n    scanner := bufio.NewScanner(os.Stdin)\n\n    // Read the first line of input (array elements)\n    if scanner.Scan() {\n        line := scanner.Text()\n        arr := parseInts(line)\n\n        secondLargest := findSecondLargest(arr)\n        fmt.Printf(\"Value of second largest element is %v\\n\", secondLargest)\n\n    }\n\n}\n</code></pre>"},{"location":"Arrays/subarray_with_sum_k/","title":"6. SubArray With Sum K","text":""},{"location":"Arrays/subarray_with_sum_k/#description","title":"Description","text":"<p>Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p>Example 1: Input: nums = [1,1,1], k = 2 Output: 2  Example 2: Input: nums = [1,2,3], k = 3 Output: 2</p> <p>Constraints: 1 &lt;= nums.length &lt;= 2 * 10^4 -1000 &lt;= nums[i] &lt;= 1000 -10^7 &lt;= k &lt;= 10^7</p>"},{"location":"Arrays/subarray_with_sum_k/#solution","title":"Solution","text":""},{"location":"Arrays/subarray_with_sum_k/#time-complexity-on","title":"Time Complexity: O(N)","text":"Python <pre><code>def subarray_with_sum_k(arr, k):\n    n = len(arr)\n    sum = 0\n    no_of_subarrays = 0\n    prefix_sum_count = {0: 1}\n    for i in range(n):\n        sum += arr[i]\n        if prefix_sum_count.get(sum - k):\n            no_of_subarrays += prefix_sum_count.get(sum - k)\n        prefix_sum_count[sum] = prefix_sum_count.get(sum, 0) + 1\n    return no_of_subarrays\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(f\"Enter array elements separated by space: \").split()))\n    k = int(input(f\"Enter the value of k: \"))\n    no_of_subarrays = subarray_with_sum_k(arr, k)\n    print(f\"Number of subarray whose sum is {k} are {no_of_subarrays}\")\n</code></pre>"},{"location":"Arrays/transpose_matrix/","title":"8. Transpose Matrix","text":""},{"location":"Arrays/transpose_matrix/#description","title":"Description","text":""},{"location":"Arrays/transpose_matrix/#solution","title":"Solution","text":""},{"location":"Arrays/transpose_matrix/#time-complexity-on2","title":"Time Complexity: O(N^2)","text":""},{"location":"Arrays/transpose_matrix/#space-complexity-on2","title":"Space Complexity: O(N^2)","text":"PythonGoJava <pre><code>def find_transpose(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed_matrix = [[None for row in range(rows)] for col in range(cols)]\n    for row in range(rows):\n        for col in range(cols):\n            transposed_matrix[col][row] = matrix[row][col]\n    return transposed_matrix\n\n\ndef display_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for row in range(rows):\n        for col in range(cols):\n            print(matrix[row][col], end=\" \")\n        print()\n\n\nif __name__ == \"__main__\":\n    rows = int(input(f\"Enter number of rows: \"))\n    cols = int(input(f\"Enter number of cols: \"))\n    matrix = []\n    for row in range(rows):\n        ans = []\n        for col in range(cols):\n            element = int(input(f\"Enter the value of element: \"))\n            ans.append(element)\n        matrix.append(ans)\n    print(f\"Value of original matrix is:\")\n    display_matrix(matrix)\n    transpose = find_transpose(matrix)\n    print(f\"Value of transposed matrix is:\")\n    display_matrix(transpose)\n</code></pre> <pre><code>package main\n\nimport \"fmt\"\n\nfunc findTranspose(matrix [][]int) [][]int {\n    rows := len(matrix)\n    cols := len(matrix[0])\n    transposedMatrix := make([][]int, cols)\n    for col := range transposedMatrix {\n        transposedMatrix[col] = make([]int, rows)\n    }\n    for row := 0; row &lt; rows; row++ {\n        for col := 0; col &lt; cols; col++ {\n            transposedMatrix[col][row] = matrix[row][col]\n        }\n    }\n    return transposedMatrix\n\n}\nfunc displayMatrix(matrix [][]int) {\n    rows := len(matrix)\n    cols := len(matrix[0])\n    for row := 0; row &lt; rows; row++ {\n        for col := 0; col &lt; cols; col++ {\n            fmt.Printf(\"%d \", matrix[row][col])\n        }\n        fmt.Println()\n    }\n\n}\nfunc main() {\n    var rows, cols int\n    fmt.Printf(\"Enter number of rows: \")\n    fmt.Scan(&amp;rows)\n    fmt.Printf(\"Enter number of cols: \")\n    fmt.Scan(&amp;cols)\n    matrix := make([][]int, rows)\n    for row := 0; row &lt; rows; row++ {\n        matrix[row] = make([]int, cols)\n        for col := 0; col &lt; cols; col++ {\n            var element int\n            fmt.Printf(\"Enter the value of element: \")\n            fmt.Scan(&amp;element)\n            matrix[row][col] = element\n\n        }\n    }\n    fmt.Println(\"Value of original matrix is:\")\n    displayMatrix(matrix)\n    transpose := findTranspose(matrix)\n    fmt.Println(\"Value of transposed matrix is:\")\n    displayMatrix(transpose)\n\n}\n</code></pre> <pre><code>package Array;\n\nimport java.util.Scanner;\n\npublic class TransposeMatrix {\n    private static void displayMatrix(int[][] arr) {\n        int rows = arr.length;\n        int cols = arr[0].length;\n        for (int i = 0; i &lt; rows; i++) {\n            for (int j = 0; j &lt; cols; j++) {\n                System.out.print(arr[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter number of rows:\");\n        int rows = sc.nextInt();\n        System.out.println(\"Enter number of columns:\");\n        int cols = sc.nextInt();\n        int[][] arr = new int[rows][cols];\n        System.out.println(\"Enter the array elements\");\n        for (int i = 0; i &lt; rows; i++) {\n            for (int j = 0; j &lt; cols; j++) {\n                arr[i][j] = sc.nextInt();\n                System.out.println(\"Element scanned to array\");\n            }\n        }\n        System.out.println(\"Value of original matrix\");\n        displayMatrix(arr);\n        System.out.println(\"Value of matrix after transpose is\");\n        int[][] transpose = new int[cols][rows];\n        // transpose the matrix\n        for (int i = 0; i &lt; cols; i++) {\n            for (int j = 0; j &lt; rows; j++) {\n                transpose[i][j] = arr[j][i];\n            }\n        }\n        displayMatrix(transpose);\n        sc.close();\n\n    }\n\n}\n</code></pre>"},{"location":"Arrays/two_sum/","title":"7. Two Sum","text":""},{"location":"Arrays/two_sum/#description","title":"Description","text":""},{"location":"Arrays/two_sum/#1-two-sum","title":"1. Two Sum","text":"<p>Given an array of integers, return <code>indices</code> of the two numbers such that they add up to a specific target.</p> <p>You may assume that each input would have <code>exactly</code> one solution, and you may not use the same element twice.</p>"},{"location":"Arrays/two_sum/#example","title":"Example :","text":"<pre><code>Given nums = [2, 7, 11, 15], target = 9,\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n</code></pre>"},{"location":"Arrays/two_sum/#solution","title":"Solution","text":""},{"location":"Arrays/two_sum/#brute-force-solution-on2","title":"Brute Force Solution: O(N^2)","text":"PythonGoJava <pre><code>def find_two_sum(arr):\n    n = len(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if arr[i] + arr[j] == target:\n                return [i, j]\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(f\"Enter array elements seaparated by space: \").split()))\n    target = int(input(f\"Enter the value of target element\"))\n    print(f\"Indexes of element that sum upto target are: {find_two_sum(arr)}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc findTwoSum(arr []int, target int) []int {\n    n := len(arr)\n    for i := 0; i &lt; n; i++ {\n        for j := i + 1; j &lt; n; j++ { // Start from i+1 to avoid using the same element twice\n            if arr[i]+arr[j] == target {\n                return []int{i, j}\n            }\n        }\n    }\n    return []int{} // Return empty slice if no pair is found\n}\n\nfunc main() {\n    var arr []int\n\n    scanner := bufio.NewScanner(os.Stdin)\n    fmt.Printf(\"Enter array elements separated by space: \")\n    if scanner.Scan() {\n        line := scanner.Text()\n        elements := strings.Fields(line)\n        for _, el := range elements {\n            num, err := strconv.Atoi(el)\n            if err != nil {\n                fmt.Println(\"Invalid input:\", err)\n                os.Exit(1)\n            }\n            arr = append(arr, num)\n        }\n    }\n\n    var target int\n    fmt.Printf(\"Enter the value of target element: \")\n    if scanner.Scan() {\n        target, _ = strconv.Atoi(scanner.Text())\n    }\n\n    fmt.Printf(\"Indexes of elements that sum up to target are: %v\\n\", findTwoSum(arr, target))\n}\n</code></pre> <pre><code>package Array;\n\nimport java.util.Scanner;\n\npublic class TwoSumBruteForce {\n    private static int[] findTwoSumTarget(int[] arr, int targetSum) {\n        int[] ans = new int[2];\n        for (int i = 0; i &lt; arr.length; i++) {\n            for (int j = 0; j &lt; arr.length; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (arr[i] + arr[j] == targetSum) {\n                    ans[0] = i;\n                    ans[1] = j;\n                }\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter array elements separated by space: \");\n        String inputLine = sc.nextLine();\n        String[] numbersAsString = inputLine.split(\" \");\n        int[] arr = new int[numbersAsString.length];\n        for (int i = 0; i &lt; arr.length; i++) {\n            arr[i] = Integer.parseInt(numbersAsString[i]);\n        }\n        System.out.println(\"Enter the value of target sum:\");\n        int targetSum = sc.nextInt();\n        System.out.println(\"Indexes of element that sum upto target are: \" + findTwoSumTarget(arr, targetSum));\n        sc.close();\n\n    }\n\n}\n</code></pre>"},{"location":"Arrays/two_sum/#optimised-solution-on","title":"Optimised Solution: O(N)","text":"PythonJava <pre><code>def find_two_sum(arr):\n    m = {}\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if m.get(complement) is not None:\n            return [m.get(complement), i]\n        m[arr[i]] = i\n    return []\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(f\"Enter array elements seaparated by space: \").split()))\n    target = int(input(f\"Enter the value of target element\"))\n    print(f\"Indexes of element that sum upto target are: {find_two_sum(arr)}\")\n</code></pre> <pre><code>package Array;\n\nimport java.util.Scanner;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class TwoSumOptimised {\n    private static int[] findTwoSumTarget(int[] arr, int target) {\n        Map&lt;Integer, Integer&gt; m = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; arr.length; i++) {\n\n            if (m.containsKey(target - arr[i])) {\n                return new int[] { i, m.get(target - arr[i]) };\n            }\n            m.put(arr[i], i);\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter the array elements separated by space:\");\n        String inputLine = sc.nextLine();\n        String[] numbersAsStrings = inputLine.split(\" \");\n        int[] nums = new int[numbersAsStrings.length];\n        for (int i = 0; i &lt; nums.length; i++) {\n            nums[i] = Integer.parseInt(numbersAsStrings[i]);\n        }\n        System.out.println(\"Enter the value of target:\");\n        int target = sc.nextInt();\n        System.out.println(\"Indexes of element that sum upto target are: \" + findTwoSumTarget(nums, target));\n        sc.close();\n    }\n\n}\n</code></pre>"},{"location":"Overview/","title":"Description","text":"<p>This contains DSA problem solutions in Python,Golang and Java</p>"},{"location":"Overview/#platforms","title":"Platforms","text":"<ul> <li>Leetcode</li> <li>GeeksForGeeks</li> </ul>"},{"location":"Overview/#topics-covered","title":"Topics Covered","text":"<ul> <li>Arrays</li> <li>Heaps</li> <li>Dynamic Programming</li> <li>Binary Search</li> <li>Recursion</li> <li>Backtracking</li> <li>Graph</li> </ul>"}]}